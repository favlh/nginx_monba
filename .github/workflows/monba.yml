name: Monitor Nginx & Backup To S3

on:
  schedule:
    - cron: '0 */12 * * *'   # Check Nginx every 12 hours
    - cron: '0 0 * * *'      # Backup to S3 every 24 hours

jobs:
  monitor:
    runs-on: #self-hosted
    timeout-minutes: 10
    steps:
      - name: Check & Install Nginx if Not Found
        run: |
          if ! command -v nginx > /dev/null; then
            echo "Nginx not found, installing..."
            sudo apt update && sudo apt install -y nginx
            echo "Fetching Nginx configuration from S3..."
            aws s3 cp s3://monba-nginx/nginx.conf /etc/nginx/nginx.conf
            sudo systemctl start nginx
            echo "Nginx installed and started with configuration from S3."
          fi

      - name: Check Nginx Status
        id: check_nginx
        run: |
          if ! curl -s --head http://localhost:80 | grep "200 OK" > /dev/null; then
            echo "Nginx is down! Restarting..."
            sudo systemctl restart nginx
            echo "Nginx has been restarted."
            echo "::set-output name=status::restarted"
          else
            echo "Nginx is running normally."
            echo "::set-output name=status::running"
          fi

      - name: Notification of Check Result
        run: |
          if [ "${{ steps.check_nginx.outputs.status }}" == "restarted" ]; then
            echo "Nginx was restarted. Status: ${{ steps.check_nginx.outputs.status }}."
          else
            echo "Nginx is running normally. Status: ${{ steps.check_nginx.outputs.status }}."
          fi

      - name: Check Error Logs if Nginx Fails to Restart
        if: steps.check_nginx.outputs.status == 'restarted'
        run: |
          if ! systemctl is-active --quiet nginx; then
            echo "Nginx is still down! Checking error logs..."
            sudo tail -n 10 /var/log/nginx/error.log
          fi

  backup:
    runs-on: self-hosted
    timeout-minutes: 15  # Cancel job if no worker is available within 15 minutes
    steps:
      - name: Sync Directory to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 sync /etc/nginx s3://monba-nginx --delete
